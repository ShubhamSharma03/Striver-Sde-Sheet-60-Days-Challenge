Ques 1 : Stock Span Problem

Code:-

class StockSpanner {
public:
    
    stack<pair<int,int>> sk;
    int next(int price) {
       
        int ct = 1;
        while(sk.size() and sk.top().first <= price)    // as shown in during Dry run on sample input
				ct+=sk.top().second;    //  we add count of poped element's count
        
        sk.pop();        
				
        sk.push({price,ct});
        return ct;
    }
};


Ques 2:- Celebrity Problem

Code:-

int findCelebrity(int n) {
    int c=0;
    for(int i=1;i<n;i++){
        if(knows(c,i)==1){
            c=i;
           }
     }
    for(int i=0;i<n;i++){
        if(i!=c and (knows(c,i)==1 or knows(i,c)==0))return -1;
       }
   return c;
}

Ques 3: Rotting oranges

Code:-

int minTimeToRot(vector<vector<int>>& grid, int m, int n)
{
    vector<int> dir={-1,0,1,0,-1};
        
  
        queue<pair<int,int>> q;
        int fresh=0;
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(grid[i][j]==2) q.push({i,j}); // When find rotten oranges then push into the queue
                if(grid[i][j]==1) fresh++;
            }
        }
        int time=-1; // Initially intialise with -1
        while(!q.empty())
        {
            int sz=q.size();
            while(sz--)
            {
                pair<int,int> p=q.front();
                q.pop();
                
                for(int i=0;i<4;i++)
                {
                    int r=p.first+dir[i];
                    int c=p.second+dir[i+1];
                    
                if(r>=0 && r<m && c>=0 && c<n && grid[r][c]==1)
                    {
                        grid[r][c]=2;
                        q.push({r,c});
                        fresh--;
                    }
                }
            }
            time++;
        }
        
        if(fresh>0) return -1; //if fresh>0 that means there are fresh oranges left
        if(time==-1) return 0; //we initialised with -1, so if there were no oranges it'd take 0 mins.
        return time;
}
