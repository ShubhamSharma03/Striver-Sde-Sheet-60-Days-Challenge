Ques 1:- Find intersection point of Y LinkedList

Code:-
int length(Node* head){

   int count = 0;

   

   while(head!=NULL){

       count++;

       head = head->next;

   }

   return count;

}

 

int findIntersection(Node *firstHead, Node *secondHead){

   

   if(firstHead == NULL || secondHead == NULL) return -1;

   

   Node* temp1 = firstHead;

   Node* temp2 = secondHead;

   

   int l1 = length(temp1);

   int l2 = length(temp2);

   

   if(l1-l2 < 0){

       int diff = l2-l1;

       while(diff--) temp2 = temp2->next;

   }

   else{

       int diff = l1-l2;

       while(diff--) temp1 = temp1->next;

   }

   while(temp1!=temp2 && temp1->next!=NULL && temp2->next!=NULL){       

       temp1 = temp1->next;

       temp2 = temp2->next;

   }

   if(temp1 == temp2) return temp1->data;

   else return -1;

}


Ques 2:- Detect a cycle in Linked List

Code:- 

bool detectCycle(Node *head)
{
	
        if(head==NULL) return false;
        
        Node* slow=head;
        Node* fast=head;
        
        while(fast!=NULL && fast->next!=NULL)
        {
            slow=slow->next;
            fast=fast->next->next;
            
            if(slow==fast) return true;
        }
        
        return false;
}



Ques 3:- Reverse a LinkedList in groups of size k

Code:- 


Node *getListAfterReverseOperation(Node *head, int n, int b[]){
   Node *dummy = new Node(0);
   dummy->next = head;
   
   Node *pre = dummy;
   Node *cur = dummy;
   Node *nex = dummy;
   
   int count = 0;    
   while(cur->next != NULL){
       cur = cur->next;
       count++;
   }
   
   int j = 0;
   while(count>0 && j<n){
       cur = pre->next;
       nex = cur->next;
       int x = (b[j]<=count) ? b[j] : count;
       if(x==0){
           j++;
           continue;
       }
       for(int i=1;i<x;i++){
           cur->next = nex->next;
           nex->next = pre->next;
           pre->next = nex;
           nex = cur->next;
       }
       pre = cur;
       count -= b[j];
       j++;
   }
   return dummy->next;

}


Ques 4:- Check if a LinkedList is palindrome or not.

Code:-

 LinkedListNode<int>* midElement(LinkedListNode<int>* head)
    {
         LinkedListNode<int>* slow=head;
         LinkedListNode<int>* fast=head;
        
        while(fast->next!=NULL && fast->next->next!=NULL)
        {
            slow=slow->next;
            fast=fast->next->next;
        }
            return slow;
    }
    
    LinkedListNode<int>* reverse( LinkedListNode<int>* head)
    {
        LinkedListNode<int>* curr=head;
        LinkedListNode<int>* prev=NULL;
        LinkedListNode<int>* next=NULL;
        
        while(curr!=NULL)
        {
            next=curr->next;
            curr->next=prev;
            
            prev=curr;
            curr=next;
        }
        
        return prev;
    }
    
bool isPalindrome(LinkedListNode<int> *head) {
    
       if(head==NULL ||head->next==NULL) return true;
        
        // Find the middle element.
         LinkedListNode<int>*  middle=midElement(head);
        
        // Reverse
         LinkedListNode<int>*  temp=middle->next;
        middle->next=reverse(temp);
        
        // Make two halves;
         LinkedListNode<int>* head1=head;
         LinkedListNode<int>*  head2=middle->next;
        
        
        while(head2!=NULL)
        {
            if(head1->data!=head2->data) return false;
            
            head1=head1->next;
            head2=head2->next;
        }
        
        return true;

}


Ques 5:- Find the starting point of the Loop of LinkedList

Code:-

Node *firstNode(Node *head)
{
	    Node* slow=head;
        Node* fast=head;
        Node* entry=head;
        
        if(head==NULL || head->next==NULL) return NULL;
        while(fast->next!=NULL && fast->next->next!=NULL)
        {
            slow=slow->next;
            fast=fast->next->next;
            
            if(slow==fast)
            {
                while(slow!=entry)
                {
                    slow=slow->next;
                    entry=entry->next;
                }
                
                return entry;
            }
        }
        return NULL;                
}


Ques 6:- Flattening of a LinkedList

Code:-


Node* merge(Node* left,Node*  right)

{

   Node*  temp=new Node(0);

   Node*  res=temp;

   if(left==NULL) return right;

   else if(right==NULL) return left;

   while(left && right){

       if(left->data<right->data)

       {

           temp->child=left;

           temp=left;

           left=left->child;

       }

       else {

           temp->child=right;

           temp=right;

           right=right->child;

       }  

   }

   if(left) temp->child=left;

  else  temp->child=right;

   temp->next=NULL;

   return res->child;

}

Node* flattenLinkedList(Node* head)  

{  

   if(head==NULL || head->next==NULL)

       return head;

head->next=flattenLinkedList(head->next);

   head= merge(head,head->next);

    return head;
}


