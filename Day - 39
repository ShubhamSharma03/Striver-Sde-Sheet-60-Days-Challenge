Ques 1:- Word Break

Code:- 

class Solution {
public:
    
    int dp[301];
    int help(int i,string s,set<string> &wordDict)
    {
        if(i==s.size()) return 1;
        
        string temp;
        if(dp[i]!=-1) return dp[i];
        
        for(int j=i;j<s.size();j++)
        {
            temp+=s[j];
            if(wordDict.find(temp)!=wordDict.end()) 
            {
                if(help(j+1,s,wordDict)) return dp[i]=1;
            }
            
        }
        return dp[i]=0;
    }
    bool wordBreak(string s, vector<string>& wordDict) {
        
        set<string> st;
        memset(dp,-1,sizeof dp);
        for(auto a: wordDict) st.insert(a);
        return help(0,s,st);
            
    }
};


Ques 2:- Job Sequencing Problem

Code:- 

class Solution 
{
    public:
  
    bool static compare(Job a, Job b)
    {
        return (a.profit>b.profit);
    }
    
    vector<int> JobScheduling(Job arr[], int n) 
    {
        sort(arr,arr+n,compare);
        
        int maxi=arr[0].dead;
        
        for(int i=1;i<n;i++)
        {
            maxi=max(maxi,arr[i].dead);
        }
        
        int slot[maxi+1];
        
        for(int i=0;i<=maxi;i++) slot[i]=-1;
        
        int countJobs=0 , jobProfit=0;
        
        for(int i=0;i<n;i++)
        {
            for(int j=arr[i].dead;j>0;j--)
            {
                if(slot[j]==-1)
                {
                    slot[j]=i;
                    countJobs++;
                    jobProfit+=arr[i].profit;
                    break;
                }
            }
        }
        
        vector<int> ans;
        ans.push_back(countJobs);
        ans.push_back(jobProfit);
        return ans;
    } 
};
