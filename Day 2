Ques 1:- Rotate Matrix

Code:- 

void rotateMatrix(vector<vector<int>> &mat, int n, int m)
{
    int row=0,col=0;
    int prev , curr;
    int lastRow=n;
    int lastCol=m;
    
    while(row<lastRow && col<lastCol)
    {
        if(row+1==lastRow || col+1==lastCol) break;
        
        prev=mat[row+1][col];
        
        // Case-I
        for(int i=col;i<lastCol;i++)
        {
            curr=mat[row][i];
            mat[row][i]=prev;
            prev=curr;
        }
            row++;
        
         // Case-II
        for(int i=row;i<lastRow;i++)
        {
            curr=mat[i][lastCol-1];
            mat[i][lastCol-1]=prev;
            prev=curr;
        }
            lastCol--;
        
        // Case-III
        if(row<lastRow)  
        {
            for(int i=lastCol-1;i>=col;i--)
            {
                curr=mat[lastRow-1][i];
                mat[lastRow-1][i]=prev;
                prev=curr;
            }
        }
        lastRow--;
        
         // Case-IV
        if(col<lastCol)  
        {
            for(int i=lastRow-1;i>=row;i--)
            {
                curr=mat[i][col];
                mat[i][col]=prev;
                prev=curr;
            }
        }
        col++;
    }
  
}


Ques 2:- Merge Intervals

Code:-

vector<vector<int>> mergeIntervals(vector<vector<int>> &inter)
{
    int n=inter.size();
        
        vector<vector<int>> ans;
        
        sort(inter.begin(),inter.end());
        
        ans.push_back(inter[0]);
        
        int j=0;
        
        for(int i=1;i<n;i++)
        {
            if(ans[j][1]>=inter[i][0])
            {
                ans[j][1]=max(ans[j][1],inter[i][1]);
            }
            
            else
            {
                j++;
                ans.push_back(inter[i]);
            }
        }
        
            return ans;
}


Ques 3:- Merge two sorted Arrays without extra space

Code:-

vector<int> ninjaAndSortedArrays(vector<int>& nums1, vector<int>& nums2, int m, int n) {
	
        int i=m-1;
        int j=n-1;
        int tar=m+n-1;
        
        while(i>=0 && j>=0)
        {
            if(nums1[i]>nums2[j])
            {
                nums1[tar]=nums1[i];
                tar--;
                i--;
            }
            
            else
            {
                nums1[tar]=nums2[j];
                tar--;
                j--;
            }
        }
        
        while(j>=0)
        {
            nums1[tar]=nums2[j];
            j--;
            tar--;
        }
        return nums1;
}


Ques 4: - Find the duplicate in an array of N+1 integers.

Code:-

int findDuplicate(vector<int> &nums, int n){
	
        int low=1;
        int high=n-1;
        
        int cnt;
        
        while(low<=high)
        {
            int mid=low+(high-low)/2;
            cnt=0;
            for(int n:nums)
            {
                if(n<=mid) cnt++;
            }
            
            if(cnt<=mid) low=mid+1;
            
            else high=mid-1;
        }
        return low;
}


Ques 5:- Repeat and Missing Number

Code:- 

pair<int,int> missingAndRepeating(vector<int> &arr, int n)
{
	pair<int,int> ans;
  
    for(int i=0;i<n;i++)
    {
        int x=abs(arr[i])-1;

        if(arr[x]<0) ans.second=x+1;

        else arr[x]*=-1;
    }
    for(int i=0;i<n;i++)
    {
        if(arr[i]>0) ans.first=i+1;
    }
        return ans;
	
}


Ques 6 :- Inversion of Array

Code:- 

#include <bits/stdc++.h> 
  #define ll long long
    ll int merge(ll arr[], ll l, ll mid, ll r){
        ll n1 = mid - l +1;
        ll int inv = 0;
        ll n2 = r - mid;
        vector<ll> a(n1), b(n2);
        for(ll i=0;i<n1;i++){
            a[i] = arr[l+i];
        }
        for(ll i=0;i<n2;i++){
            b[i] = arr[mid+ 1+ i];
        }
        ll i = 0, j =0, k = l;
        while(i<n1 && j < n2){
            if(a[i] <=  b[j]){
                arr[k++] = a[i++];
            }
            else{
                arr[k] = b[j];
                inv += n1 - i;
                k++;
                j++;
                
            }
        }
        while(i < n1){
            arr[k++] = a[i++];
        }
        while(j < n2){
            arr[k++] = b[j++];
        }
        return inv;
    }
    ll int mergeSort(ll arr[], ll l, ll r){
        ll int inv = 0;
        if(l < r){
            int mid = l + (r- l)/2;
            inv += mergeSort(arr,l,mid);
            inv += mergeSort(arr,mid+1,r);
            
            inv += merge(arr,l,mid,r);
        }
        return inv;
    }

long long getInversions(long long *arr, int n){
    
        ll int inv = mergeSort(arr,0,n-1);
        return inv;
}
