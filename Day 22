Ques 1: Left View of Binary Tree

Code:-

void helper(TreeNode<int>* root, int level, vector<int> &ans)
{
    if(root==NULL) return;
    
    if(ans.size()==level) ans.push_back(root->data);
    
    helper(root->left,level+1,ans);
    helper(root->right,level+1,ans);
    
}
vector<int> getLeftView(TreeNode<int> *root)
{
    vector<int> ans;
    helper(root,0,ans);
    return ans;
}

Ques 2:- Bottom View of Binary Tree

Code:-

vector<int> bottomView(BinaryTreeNode<int> * root){

    vector<int> res;
    if(root==NULL) return res;
    
    map<int,int> mpp;
    queue<pair<BinaryTreeNode<int>* ,int>> q;
    
    q.push({root,0});
    
    while(!q.empty())
    {
        auto it=q.front();
        q.pop();
        
        BinaryTreeNode<int>* node=it.first;
        int hd=it.second;
        
        mpp[hd]=node->data;
        
        if(node->left!=NULL) q.push({node->left,hd-1});
        if(node->right!=NULL) q.push({node->right,hd+1});
 
    }
    for(auto it: mpp)
    {
        res.push_back(it.second);
    }
    return res;
}

Ques 3: Top View of Binary Tree

Code:-

vector<int> getTopView(TreeNode<int> *root) {
    vector<int> res;
    if(root==NULL) return res;
    
    map<int,int> mpp;
    queue<pair<TreeNode<int>* ,int>> q;
    
    q.push({root,0});
    
    while(!q.empty())
    {
        auto it=q.front();
        q.pop();
        
        TreeNode<int>* node=it.first;
        int hd=it.second;
        
        if(mpp.find(hd)==mpp.end()) mpp[hd]=node->val;
        
        if(node->left!=NULL) q.push({node->left,hd-1});
        if(node->right!=NULL) q.push({node->right,hd+1});
 
    }
    for(auto it: mpp)
    {
        res.push_back(it.second);
    }
    return res;
}

Ques 4: Vertical Order Traversal of Binary Tree

Code:- 

vector<vector<int>> verticalTraversal(TreeNode* root) {
        
        map<int,map<int,multiset<int>>> nodes;
        queue<pair<TreeNode*,pair<int,int>>> todo;
        todo.push({root,{0,0}});
        
        while(!todo.empty())
        {
            auto p=todo.front();
            todo.pop();
            
            TreeNode* node=p.first;
            int x=p.second.first , y=p.second.second;
            
            nodes[x][y].insert(node->val);
            
            if(node->left) todo.push({node->left,{x-1,y+1}});
            if(node->right) todo.push({node->right,{x+1,y+1}});        
        }
            
        vector<vector<int>> ans;
        for(auto p:nodes)
        {
            vector<int> col;
            for(auto q:p.second)
            {
                col.insert(col.end(),q.second.begin(),q.second.end());
            }
            
            ans.push_back(col);
        }
            return ans;
    }

