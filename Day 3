Ques 1:- Search in a Rotated Matrix

Code:- 


bool findTargetInMatrix(vector < vector < int >> & mat, int n, int m, int target) {
    
        int low  = 0;
        int high = m*n-1;
        int mid  = low+(high-low)/2;
        
        while(low<=high)
            
        {
            
            int element=mat[mid/m][mid%m];
            
            if(element==target) return true;
            
            else if(element>target) high=mid-1;
            
            else low=mid+1;
            
            mid=low+(high-low)/2;
            
        }
        
        return false;
}

Ques 2:- Pow(X,n)

Code:-

int modularExponentiation(int x, int n, int m) 
{
   int result = 1 ;
   while(n!=0)
   {
       if(n&1) result = (1LL* (result)%m * (x)%m ) %m ;
       x = (1LL* (x)%m * (x)%m )%m ;
       n = n >> 1 ;
   }
       return result ;
}

Ques 3: Majority Element (>N/2 times)

Code:-

int findMajorityElement(int nums[], int n) 
{
    
	    int count=0;
        int candidate=-1;
        
        for(int i=0;i<n;i++)
        {
            if(count==0) candidate=nums[i];
            
            if(nums[i]==candidate) count++;
            
            else count--;
        }
    
       int ct=0;
       for(int i=0;i<n;i++) if(candidate==nums[i])ct++;
       if(ct>floor(n/2)) return candidate;
       else return -1;
}

Ques 4: Majority Element (>N/3 times)

Code:- 

vector<int> majorityElementII(vector<int> &nums)
{
      int sz=nums.size();
        
        int count1=0 , count2=0 , nums1=-1, nums2=-1;
        
        for(int i=0;i<sz;i++)
        {
            if(nums[i]==nums1) count1++;
            
            else if(nums[i]==nums2) count2++;
            
            else if(count1==0)
            {
                nums1=nums[i];
                count1=1;
            }
            
            else if(count2==0)
            {
                nums2=nums[i];
                count2=1;
            }
            
            else 
            {
                count1--;
                count2--;
            }
            
        }
        
        vector<int> ans;
        
        count1=count2=0;
        
        for(int i=0;i<sz;i++)
        {
            if(nums[i]==nums1) count1++;
            else if(nums[i]==nums2) count2++;
        }
            if(count1>sz/3) ans.push_back(nums1);
            if(count2>sz/3) ans.push_back(nums2);
        
            return ans;

}

Ques 5:- Grid Unique Paths

Code:-

int uniquePaths(int m, int n) {

        int dp[m][n];
        
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(i<0 || j<0 || i>m-1 || j>n-1) return 0;
                
                if(i==0 || j==0) dp[i][j]=1;
                
                else dp[i][j]=dp[i-1][j]+dp[i][j-1];
            }
        }
            return dp[m-1][n-1];
}

Ques 6:- Reverse Pairs

Code:-


    int cnt;
    void checkCount(vector<int>& nums, int start, int mid, int end)
    {
        // two pointers;
        int l = start, r = mid + 1;
        while(l <= mid && r <= end)
        {
            if((long)nums[l] > (long) 2 * nums[r])
            {
                cnt += (mid - l + 1);
                r++;
            }
            
            else l++;
        }
        
       // worst case might be nlog(n)
       
        sort(nums.begin() + start, nums.begin() + end + 1);
        return;
        
    }

    void mergeSort(vector<int>& nums, int start, int end){
        if(start == end) return;
        
        int mid = (start + end)/2;
        mergeSort(nums,start, mid);
        mergeSort(nums,mid+1,end);
        
        checkCount(nums,start,mid,end);
        return;
    }


int reversePairs(vector<int> &nums, int n)
{
        if(!n) return 0;
        cnt = 0;
        mergeSort(nums,0,nums.size()-1);
        return cnt;
}
