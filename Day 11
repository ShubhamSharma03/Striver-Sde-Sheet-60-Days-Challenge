Ques 1:- Nth Root of a Integer

Code:-

double multiply(double m,int n)
{
    double ans=1.00;
    while(n>0)
    {
        ans*=m;
        n--;
    }
    return ans;
}

double findNthRootOfM(int n, long long m) {

	  double low=1;
    double high=m;
    double esp=1e-7;
    
    while((high-low)>esp)
    {
        double mid=(high+low)/2.00;
        if(multiply(mid,n)<m) low=mid;
        else high=mid;
    }
    return high;
}


Ques 2:- Matrix Median

Code:-

int count(vector<vector<int>> &arr, int n,int m, int digit)
{
    int c = 0;
    for(int i = 0; i < n; i++)
    {
        int s = 0, e = m-1, mid = s+(e-s)/2,ans=-1;
        while(s<=e)
        {
            if(arr[i][mid]<=digit)
            {
                ans = mid;
                s = mid + 1;
            }
            else
                e = mid -1;
            mid = s+(e-s)/2;
        }
        if(ans>=0)
        	c += ans+1;
    }
    return c;
}
int kMin(vector<vector<int>> &arr, int n,int m, int k) 
{
    int start = 0, end = 100007;
    int mid = start + (end - start)/2;
    int ans = arr[n-1][n-1];
    while(start<end)
    {
        int digits = count(arr,n,m,mid);
        if(digits >= k)
        {
            ans = mid;
            end = mid;
        }
        else
            start = mid + 1;
        mid = start + (end - start)/2;
    }
    return ans;
}
int getMedian(vector<vector<int>> &matrix)
{
    int n = matrix.size(), m = matrix[0].size(),k = ((n*m)/2)+1;
    return kMin(matrix, n, m, k) ;
}


Ques 3:- Single Element in a Sorted Array

Code:-

int uniqueElement(vector<int> nums, int n)
{

        int left=0 , right=n-1;
        
        while(left<right)
        {
            int mid=(left+right)/2;
            
            if((mid%2==0 &&(nums[mid]==nums[mid+1])) || (mid%2==1 &&(nums[mid-1]==nums[mid])))
            {
                left=mid+1;
            }
            
            else right=mid;
        }
        return nums[left];
}


Ques 4:- Search element in a sorted and rotated array.

Code:-

int search(int* nums, int n, int target) {
    
    int low=0;
    int high=n-1;
    
    while(low<=high)
    {
        int mid=low+(high-low)/2;
        
        if(nums[mid]==target) return mid;
        
        if(nums[low]<=nums[mid])
        {
            if(nums[low]<=target && target<nums[mid]) high=mid-1;
            else low=mid+1;
        }
        
        else 
        {
            if(target>nums[mid] && target<=nums[high]) low=mid+1;
            else high=mid-1;
        }
    }
    return -1;
}

