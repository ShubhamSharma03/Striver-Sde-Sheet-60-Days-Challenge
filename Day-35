Ques 1:- Maximum Product Subarray

Code:- 

class Solution {
public:
    int maxProduct(vector<int>& nums) {
        
        int n=nums.size(),res=INT_MIN,l=1,r=1;
    
        for(int i=0;i<n;i++)
        {
            l*=nums[i];
            r*=nums[n-1-i];
            res=max(res,max(l,r));
            if(l==0) l=1;
            if(r==0) r=1;
        }
        return res;
    }
};


Ques 2:- Longest Increasing Subsequence

Code:-

class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
       
        int n=nums.size();
        
        int LIS[n];
        LIS[0]=1;
        
        for(int i=1;i<n;i++)
        {
            LIS[i]=1;
            
            for(int j=0;j<i;j++)
            {
                if(nums[j]<nums[i])
                {
                    LIS[i]=max(LIS[i],LIS[j]+1);
                }
            }
        }
        
        int res=LIS[0];
        for(int i=1;i<n;i++)
        {
            res=max(res,LIS[i]);
        }
        return res;
    }
};


Ques 3:- Longest Common Subsequence

Code:- 

class Solution {
public:
    int longestCommonSubsequence(string x, string y) {
        
        int n = x.length();
        int m = y.length();
        int dp[n+1][m+1];
        
        for(int i=0;i<n+1;i++)
        {
            for(int j=0;j<m+1;j++)
            {
                if(i==0 || j==0) dp[i][j]=0;     
            }
        }
        
        for(int i=1;i<n+1;i++)
        {
            for(int j=1;j<m+1;j++)
            {
                if(x[i-1]==y[j-1]) dp[i][j]=1+dp[i-1][j-1];
                
                else dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
                
            }
        }
        
        return dp[n][m];
    
    }
};


Ques 4:- Edit Distance

Code:- 

class Solution {

public:
    int minDistance(string a, string b) {
        int n = a.length();
        int m = b.length();
        int static dp[501][501];
        
        //if first string is empty and then copy all elements form second to first string
        for(int i=0;i<n+1;i++)
            dp[i][0]=i;
        
        // if second string is empty then copy all the elements from first to second string.
        for(int j=0;j<m+1;j++)
            dp[0][j]=j;
        
     
        for(int i=1;i<n+1;i++)
        {
            for(int j=1;j<m+1;j++)
            {
                // if both the strings are equal then no need to do. 
                if(a[i-1]==b[j-1]) dp[i][j]=dp[i-1][j-1];
                
                // if both are not equal then try to get min of these three
                
                else dp[i][j]=1+min({dp[i-1][j],// insert 
                                     dp[i][j-1],// delete
                                     dp[i-1][j-1]}); // replace
                
            }
        }
        
        return dp[n][m];
    
    }
};
