Ques 1:- Detect A cycle in Undirected Graph 

Code:- 

bool isCyclic(vector<int> adj[],vector<int> &vis,int v,int parent){

    vis[v] =1;

    for(int child : adj[v]){

        if(!vis[child]){

            if(isCyclic(adj,vis,child,v)) return true;

        }

        else if(child != parent){

            return true;

        }

    }

    return false;

}

string cycleDetection (vector<vector<int>>& edges, int n, int m)

{


    vector<int> adj[n+1];

    for(int i = 0;i<m;i++){

        adj[edges[i][0]].push_back(edges[i][1]);

        adj[edges[i][1]].push_back(edges[i][0]);

    }

    vector<int> vis(n+1,0);

    for(int i =1;i<=n;i++){

        if(!vis[i] && isCyclic(adj,vis,i,-1)){

            return "Yes";

        }

    }

    return "No";

}

Ques 2:- Detect Cycle In A Directed Graph

Code:- 

bool detect_cycle(int src, vector<int> adj[], vector<int> &visit)
{
    visit[src] = 2;
    
    for(auto it: adj[src])
    {
        if(visit[it]==0)
        {
            if(detect_cycle(it, adj, visit)) return true;
        }
        
        else if(visit[it] == 2) return true;
    }
    
    visit[src] = 1;
    return false;
}

int detectCycleInDirectedGraph(int n, vector < pair < int, int >> & edges) {

    vector<int> adj[n+1];
    
    for(int i=0;i<edges.size();i++)  adj[edges[i].first].push_back(edges[i].second);
    
    vector<int> visit(n+1, 0);
    
    for(int i=1;i<n;i++)
    {
        if(visit[i] == 0)
        {
            if(detect_cycle(i,adj,visit)) return 1;
        }
    }
     return 0;
}
