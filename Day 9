Ques 1:- Subset Sums

Code:-

void helper(int index,int sum,vector<int> arr,vector<int> &sumOfSubsets)
{
    if(index==arr.size())
    {
        sumOfSubsets.push_back(sum);
        return;
    }
    
    // Option1: Picking the element.
    helper(index+1,sum+arr[index],arr,sumOfSubsets);
    
    //Option2: Not Picking up the element.
    helper(index+1,sum,arr,sumOfSubsets);
}

vector<int> subsetSum(vector<int> &nums)
{
    vector<int> sumOfSubsets;
    helper(0,0,nums,sumOfSubsets);
    sort(sumOfSubsets.begin(),sumOfSubsets.end());
    return sumOfSubsets;
}


Ques 2:- Subset-II

Code:-


void helper(int index,vector<int> &arr, vector<vector<int>> &ans,vector<int> &curr)
{
    ans.push_back(curr);
    for(int i=index;i<arr.size();i++)
    {
        if(i>index && arr[i]==arr[i-1]) continue;
        
        // Include arr in curr
        curr.push_back(arr[i]);
        helper(i+1,arr,ans,curr);
        curr.pop_back();
    }
}
vector<vector<int>> uniqueSubsets(int n, vector<int> &arr)
{
    vector<vector<int>> ans;
    vector<int> curr;
    
    sort(arr.begin(),arr.end());
    helper(0,arr,ans,curr);
    
    return ans;
}

Ques 3:- Combination Sum-I

Code:-

 void helper(vector<int>& nums,int target,int currIndex,vector<vector<int>> &res,vector<int> aux)
    {
        if(currIndex==nums.size())
        {
            if(target==0) res.push_back(aux);            
            return;
        }
        
        //Feasible only if currIndex value is less than the target.     
        else 
        {
            aux.push_back(nums[currIndex]);
            helper(nums,target-nums[currIndex],currIndex+1,res,aux);
            aux.pop_back();
            
            // backtracking
            helper(nums,target,currIndex+1,res,aux);
        }      
    }

vector<vector<int>> findSubsetsThatSumToK(vector<int> nums, int n, int target)
{
        vector<vector<int>> res;
        vector<int> aux;
        
        helper(nums,target,0,res,aux);
        
        return res;
}


Ques 4:- Combination Sum-II

Code:- 


void findcombinations(int index,vector<int>&arr,int target,vector<vector<int>>&ans,vector<int>&ds)
{
        if(target==0)
        {
            ans.push_back(ds);
            return;
        }
        
        for(int i=index;i<arr.size();i++)
        {
            if(i>index && arr[i]==arr[i-1]) continue;
            
            if(arr[i]<=target)
            {
                ds.push_back(arr[i]);
                findcombinations(i+1,arr,target-arr[i],ans,ds);
                ds.pop_back();
            }
        }
}
vector<vector<int>> combinationSum2(vector<int> &arr, int n, int target)
{
    
        sort(arr.begin(),arr.end());
        vector<vector<int>>ans;
        vector<int>ds;
        findcombinations(0,arr,target,ans,ds);
        
        return ans;
}


Ques 5:- Palindrome Partitioning

Code:-

bool isPalindrome(string s, int start,int end)
{
    while(start<=end)
    {
        if(s[start++]!=s[end--]) return false;
    }
    return true;
}

void helper(int index, string s, vector<string> &path, vector<vector<string>> &res)
{
    if(index==s.size())
    {
        res.push_back(path);
        return;
    }
    
    for(int i=index;i<s.size();++i)
    {
        if(isPalindrome(s,index,i))
        {
            path.push_back(s.substr(index,i-index+1));
            helper(i+1,s,path,res);
            path.pop_back();
        }
    }
}

vector<vector<string>> partition(string &s) 
{
    vector<vector<string>> res;
    vector<string> path;
    helper(0,s,path,res);
    return res;
}


Ques 6:- K-th Permutation Sequence

Code:-

string kthPermutation(int n, int k) {

        int factorial=1;
        
        vector<int> numbers;
        
        for(int i=1;i<n;i++)
        {
            factorial=factorial*i;
            numbers.push_back(i);        
        }
        
        numbers.push_back(n);
        
        string ans="";
        k=k-1;
        
        while(true)
        {
            ans=ans+to_string(numbers[k/factorial]);
            numbers.erase(numbers.begin()+k/factorial);
            
            if(numbers.size()==0) break;
            
            k=k%factorial;
            factorial=factorial/numbers.size();
        }
        return ans;
}


