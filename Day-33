Ques 1:- DFS Traversal

Code:- 

void dfs(vector<int> adj[], int node, vector<int>&cmp, vector<int>&vis)
    
{
    cmp.push_back(node);
    vis[node] = 1;
    for(auto it: adj[node])
    {
        if(!vis[it])
        {
            dfs(adj, it, cmp, vis);
        }
    }
}

vector<vector<int>> depthFirstSearch(int V, int E, vector<vector<int>> &edges)
{
    vector<int>adj[V];
    vector<int>vis(V,0);
    vector<vector<int>>ans;
    
    for(int i=0; i<E; i++)
    {
        adj[edges[i][0]].push_back(edges[i][1]);
        adj[edges[i][1]].push_back(edges[i][0]);
    }
    
    for(int i=0; i<V; i++)
    {
         if(!vis[i])
         {
            vector<int>cmp;
            dfs(adj, i, cmp, vis);
            ans.push_back(cmp);            
        }
    }
    
    return ans;
}

Ques 2: BFS Traversal 

Code:- 

#include<queue>
//Print the BFS

void printBFSHelper(vector<vector<int>> &adjancey_matrix,int source,
                    vector<bool> &visited, vector<int> &result)
{
    queue<int> q;
    visited[source] =true;
    q.push(source);
    
    //Traversing all the nodes that are connected to the sourcenode.
    
    while(!q.empty())
    {
        int front=q.front();
        q.pop();
        result.push_back(front);
        for(int i=0;i<adjancey_matrix.size();i++)
        {
            if(adjancey_matrix[front][i]==1 && !visited[i])
            {
                visited[i]=true;
                q.push(i);
            }
        }
    }
}

// Creating Adjancey Matrix
vector<vector<int>> createAdjMat(int vertex,vector<pair<int,int>>&edges)
{
    vector<vector<int>> adjancey_matrix(vertex);
    for(int i=0;i<vertex;i++)
    {
        adjancey_matrix[i]=vector<int>(vertex);
        for(int j=0;j<vertex;j++)
        {
            adjancey_matrix[i][j]=0;
        }
    }
    for(int i=0;i<edges.size();i++)
    {
        adjancey_matrix[edges[i].first][edges[i].second]=1;
        adjancey_matrix[edges[i].second][edges[i].first]=1;
    }
    return adjancey_matrix;
}
// Thisis the main Function 
vector<int> BFS(int vertex, vector<pair<int, int>> edges)
{
    // Write your code here
    vector<vector<int>> adjancey_matrix=createAdjMat(vertex,edges);
    vector<bool> visited(adjancey_matrix.size());
    
    for(int i=0;i<vertex;i++)
    {
        visited[i]=false;
    }
    vector<int> result;
    for(int i=0;i<adjancey_matrix.size();i++)
    {
        if(!visited[i])
        {
            printBFSHelper(adjancey_matrix,i,visited,result);
        }
    }
    return result;
}
