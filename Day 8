Ques 1:- N meetings in one room

Code:-

struct meeting
    {
        int start;
        int end;
        int pos;
    };
    
    bool comparator(struct meeting m1, meeting m2)
    {
        if(m1.end<m2.end) return true;
        else if(m1.end>m2.end) return false;
        else if(m1.pos<m2.pos) return true;
        else return false;
    }

vector<int> maximumMeetings(vector<int> &s, vector<int> &e) {
        int n=s.size();
        struct meeting meet[n];
        for(int i=0;i<n;i++)
        {
            meet[i].start=s[i] , meet[i].end=e[i] , meet[i].pos=i+1;
        }
        
        sort(meet,meet+n,comparator);
        
        vector<int> ans;
        int limit=meet[0].end;
    
        ans.push_back(meet[0].pos);
        
        for(int i=1;i<n;i++)
        {
            if(meet[i].start>limit)
            {
                limit=meet[i].end;
                ans.push_back(meet[i].pos);
            }
        }
        return ans;
}


Ques 2:- Minimum number of platforms required for a railway

Code:-

int calculateMinPatforms(int arr[], int dep[], int n) {
        sort(arr,arr+n);
        sort(dep,dep+n);
        
        int plat_needed=1, result=1;
        int i=1 , j=0;
        
        while(i<n && j<n)
        {
            if(arr[i]<=dep[j])
            {
                plat_needed++;
                i++;
            }
            
             else if(arr[i]>dep[j])
            {
                plat_needed--;
                j++;
            }
            
            if(plat_needed>result)
            {
                result=plat_needed;
            }
        }
        return result;
}


Ques 3:- Job sequencing Problem

Code:-


bool static compare(vector<int> a, vector<int> b)
    {
        return (a[1]>b[1]);
    }

int jobScheduling(vector<vector<int>> &jobs)
{
        sort(jobs.begin(),jobs.end(),compare);
        int n=jobs.size();
    
        int maxi=jobs[0][0];
        
        for(int i=1;i<n;i++)
        {
            maxi=max(maxi,jobs[i][0]);
        }
        
        int slot[maxi+1];
        
        for(int i=0;i<=maxi;i++) slot[i]=-1;
        
        int countJobs=0 , jobProfit=0;
        
        for(int i=0;i<n;i++)
        {
            for(int j=jobs[i][0];j>0;j--)
            {
                if(slot[j]==-1)
                {
                    slot[j]=i;
                    countJobs++;
                    jobProfit+=jobs[i][1];
                    break;
                }
            }
        }
        return jobProfit;
}


Ques 4:- Fractional Knapsack Problem

Code:-


bool comparator(pair<int,int>a,pair<int,int>b){
    double r1=(double)a.second/(double)a.first;
    double r2=(double)b.second/(double)b.first;
    return r1>r2;
}
double maximumValue (vector<pair<int, int>>& items, int n, int w)
{
   
    sort(items.begin(),items.end(),comparator);
    
    int currWeight=0;
    double finalValue=0.0;
    
    for(int i=0;i<n;i++){
        if(currWeight+items[i].first<=w){
            currWeight+=items[i].first;
            finalValue+=items[i].second;
        }
        else{
            int remain=w-currWeight;
            finalValue+=((double)items[i].second/(double)items[i].first)*(double)remain;
            break;
        }
    }
    return finalValue;
}



Ques 5:- Find minimum number of coins.

Code:-

int findMinimumCoins(int V) 
{
    int deno[]={1,2,5,10,20,50,100,500,1000};
    
    int n=9;
    
    vector<int> ans;
    
    for(int i=n-1;i>=0;i--)
    {
        while(V>=deno[i])
        {
            V-=deno[i];
            ans.push_back(deno[i]);
        }
    }
    return ans.size();
}



Ques 6:- Activity Selection Problem

Code:-

int findMinimumCoins(int V) 
{
    int deno[]={1,2,5,10,20,50,100,500,1000};
    
    int n=9;
    
    vector<int> ans;
    
    for(int i=n-1;i>=0;i--)
    {
        while(V>=deno[i])
        {
            V-=deno[i];
            ans.push_back(deno[i]);
        }
    }
    return ans.size();
}

struct job{
    int start; 
    int end;
};

bool comp(struct job a, struct job b)
{
    return (a.end < b.end);
}

int maximumActivities(vector<int> &start, vector<int> &finish) {
   
    int n=start.size();
    struct job v[n];
    
    for(int i=0; i<n; i++)
    {
        v[i].start = start[i];
        v[i].end = finish[i];
    }
    
    sort(v, v+n, comp);
    
    int ans = 1;
    int end = v[0].end;
    for(int i=1; i<n; i++)
    {
        if(v[i].start >= end)
        {
            end = v[i].end;
            ans++;
        }
    }
    
    return ans;
}


