Ques 1:- Minimum Path Sum

Code:- 

class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
             
        int n=grid.size();
        int m=grid[0].size();
        
        vector<vector<int>> dp(n,vector<int>(m,0));
        
        dp[0][0]=grid[0][0];
        
        // for 0th col
        for(int i=1;i<n;i++) dp[i][0]= dp[i-1][0] + grid[i][0];
        
        // for 0th row
        for(int j=1;j<m;j++) dp[0][j]= dp[0][j-1] + grid[0][j];
        
        for(int i=1;i<n;i++)
        {
            for(int j=1;j<m;j++)
            {
                dp[i][j]=min(dp[i-1][j],dp[i][j-1]) +grid[i][j];
            }
        }
        return dp[n-1][m-1];
    }
};


Ques 2:-  Partition Equal Subset Sum

Code:- 

class Solution {
private:
    bool isSubsetSum(int n,vector<int> &nums,int sum){
        
        bool dp[n+1][sum+1];
        for(int i=0;i<n+1;i++)
        {
            for(int j=0;j<sum+1;j++)
            {
                if(i==0) dp[i][j]=false;
                if(j==0) dp[i][j]=true;
            }
        }
        for(int i=1;i<n+1;i++)
        {
            for(int j=1;j<sum+1;j++)
            {
                if(nums[i-1]<=j)
                    dp[i][j]=dp[i-1][j-nums[i-1]] || dp[i-1][j];
                else
                    dp[i][j]=dp[i-1][j];
            }
        }
        return dp[n][sum];
    }
    
public:
    bool canPartition(vector<int>& nums) {
        
        int n=nums.size();
        int sum=0;
        for(int i=0;i<n;i++) sum+=nums[i];
        if(sum%2==0) 
        {
            return isSubsetSum(n,nums,sum/2);
        }
    return false;
    }
};


Ques 3:- Coin Change

Code:- 

class Solution {
public:
    int coinChange(vector<int>& coins, int amount) {
        
        int M=coins.size();
        int V=amount;
        int dp[M+1][V+1];
        
        // Fill the first row and first column
	    for(int i=0;i<M+1;i++)
	    {
	        for(int j=0;j<V+1;j++)
	        {
	            if(j==0)  dp[i][j]=0;
	            if(i==0)  dp[i][j]=INT_MAX-1;  
	            
	        }
	    }
	    
        // Code for 2nd row this is the unique ques where we have to fill the second row also.
	    for(int j=1;j<V+1;j++)
	    {
	        if(j%coins[0]==0) dp[1][j]=j/coins[0];
	        
	        else dp[1][j]= INT_MAX-1;
	    }
	    
        
	    for(int i=1;i<M+1;i++){
	        for(int j=1;j<V+1;j++)
	        {
                                               // not include    // include the coins
	           if(coins[i-1]<=j) dp[i][j]=min( dp[i-1][j], 1 + dp[i][j-coins[i-1]] );
                
                // not include 
	           else dp[i][j]=dp[i-1][j];
	        }
	    }
	    return dp[M][V]==INT_MAX-1 ? -1 : dp[M][V];
    }
};
