Ques 1:- Minimum Cost to Cut a Stick

Code:- 

class Solution {
public:
    int dp[101][101];
    int solve(int start_stick,int end_stick, vector<int> & cuts,int left,int right)
    {
        if(left>right) return 0;
        
        if(dp[left][right]!=-1) return dp[left][right];
        
        int cost=1e9;
        
        for(int i=left;i<=right;i++)
        {
            int left_cost=solve(start_stick,cuts[i],cuts,left,i-1);
            int right_cost=solve(cuts[i],end_stick,cuts,i+1,right);
            int curr_cost=(end_stick-start_stick)+left_cost+right_cost;
            cost=min(cost,curr_cost);
        }
        
        return dp[left][right]=cost;
    }
    int minCost(int n, vector<int>& cuts) {
        
        memset(dp,-1,sizeof(dp));
        sort(cuts.begin(),cuts.end());
        return solve(0,n,cuts,0,cuts.size()-1);
        
    }
};


Ques 2:- Egg Dropping	

Code:- 

class Solution {
public:
     int helper(int k,int n,vector<vector<int>> &memo)
         
        {
         // Basically we have two cases in this:-
        
        // 1. Egg will break.
        // 2. Egg will not break.
        
         // For First case if the egg will break then we go down the floor
        //  If Second case the egg will not break then we have to go up the floor.
         
            if(n==0 || n==1) return n;
         
            if(k==1) return n;
            
            if(memo[k][n]!=-1) return memo[k][n];
         
            int mn=INT_MAX , low=0 , high=n, temp=0;
            
            while(low<=high)
            {
                int mid=(low+high)/2;
                
                int left  = helper(k-1,mid-1,memo);
                int right = helper(k,n-mid,memo);
                
                
                temp=1+max(left,right);
                
                if(left<right) low=mid+1;
                else high=mid-1;
                
                mn=min(mn,temp);   
            }
            return memo[k][n]=mn;
     }
    
    
    int superEggDrop(int k, int n) 
    {    
        vector<vector<int>> memo(k+1,vector<int>(n+1,-1));  
        return helper(k,n,memo);
    }
};
